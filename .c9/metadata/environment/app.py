{"changed":true,"filter":false,"title":"app.py","tooltip":"/app.py","value":"import os, math, datetime, pprint\nfrom flask import Flask, render_template, redirect, request, url_for, session, flash, jsonify, json\nfrom flask_pymongo import PyMongo, pymongo\nfrom bson.objectid import ObjectId\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(__name__)\n\napp.config['MONGO_DBNAME'] = 'myRecipeDB'\napp.config['MONGO_URI'] = os.getenv(\"MONGO_URI\")\napp.config['SECRET_KEY'] = os.environ.get(\"SECRET_KEY\")\n\nmongo = PyMongo(app)\n\n# Collections\nusers = mongo.db.users\nrecipes = mongo.db.recipes\ndeleted = mongo.db.deleted\n\n@app.route('/')\ndef intro():\n    \"\"\"\n    Intro Page for the Website. Invites users to Start Browsing, Sign-In or Register a new account\n    \"\"\"\n    return render_template(\"intro.html\")\n    \n@app.route('/get_recipes')    \ndef get_recipes():\n    \"\"\"\n    Main Page for the Website. Displays all the recipes with pagination. Also features a Most Popular section.\n    \"\"\"\n    \n    # Pagination \n    \n    # # Recipes per page\n    p_limit = 9\n    current_page = int(request.args.get('current_page', 1))\n    collection = mongo.db.recipes.count()\n    pages = range(1, int(math.ceil(collection / p_limit)) + 1)\n    total_page_no = int(math.ceil(collection/p_limit))\n    recipes = mongo.db.recipes.find().skip((current_page -1)*p_limit).limit(p_limit).sort('_id', pymongo.DESCENDING)\n\n    # Most Popular recipes\n    recommended = mongo.db.recipes.find().sort(\"favourite_count\", pymongo.DESCENDING).limit(3)\n          \n    \n                          \n    return render_template(\"showall.html\", recipes=recipes, current_page=current_page, pages=pages, total_page_no=total_page_no, recommended=recommended)\n    \n    \n@app.route('/search')\ndef search():\n    \"\"\"\n    Search Results Page. Uses MongoDB's wildcard text search to search for any words that appear in the recipes that are searched.\n    The results are then paginated. If there are no results for the user's query, the Most Popular section appears as a suggestion.\n    \"\"\"\n    # Wildcard text search index\n    mongo.db.recipes.create_index([(\"$**\", pymongo.TEXT)])\n    #  Results per page\n    p_limit = 9\n    current_page = int(request.args.get('current_page', 1))\n    #  Input term for search query\n    word_search = request.args.get('word_search')\n    #  Results for search sorted by ID\n    results = mongo.db.recipes.find({'$text': {'$search': str(word_search) }}, {\"score\": {\"$meta\": 'textScore'}}).sort('_id', pymongo.ASCENDING).skip((current_page -1)*p_limit).limit(p_limit)\n    # Pagination\n    results_count = mongo.db.recipes.find({'$text': {'$search': str(word_search) }}).count()\n    results_pages = range(1, int(math.ceil(results_count / p_limit)) + 1)\n    total_page_no = int(math.ceil(results_count/p_limit))\n    \n    # Most Popular recipes - appear when there are no results to the user's query\n    recommended = mongo.db.recipes.find().sort(\"favourite_count\", pymongo.DESCENDING).limit(3)\n    \n    return render_template(\"search.html\", \n                            p_limit = p_limit,\n                            current_page=current_page, \n                            results_count=results_count,\n                            word_search=word_search,\n                            results=results,\n                            results_pages=results_pages,\n                            total_page_no=total_page_no,\n                            recommended=recommended)    \n    \n    \n@app.route('/recipe_display/<recipe_id>')\ndef recipe_display(recipe_id):\n    \n    \"\"\"\n    Displays the recipe on a page of its own.\n    \"\"\"\n    \n    recipe = mongo.db.recipes.find_one({'_id':ObjectId(recipe_id)})\n    \n    return render_template('recipe_display.html', recipe=recipe)\n    \n\n    \n    \n@app.route('/edit_recipe/<recipe_id>')\ndef edit_recipe(recipe_id):\n    \"\"\"\n    Path to edit the recipe currently being viewed. User is brought to a form page based on the recipe's current fields.\n    \"\"\"\n    \n    # Checks if user is in session\n    if 'user' in session:\n    \n        recipe = mongo.db.recipes.find_one({'_id': ObjectId(recipe_id)})\n        \n    else:\n        flash(\"You must be logged in to Edit, Save or Delete a recipe!\")\n        return redirect(url_for('get_recipes')) \n    \n    return render_template('editrecipe.html', recipe=recipe)\n    \n@app.route('/update_recipe/<recipe_id>', methods=[\"POST\"])\ndef update_recipe(recipe_id):\n    \"\"\"\n    Updates the recipe when the user submits the form displayed on the edit page.\n    \"\"\"\n    \n    # Captures the form data and updates the recipe.\n    recipes.update_one({'_id':ObjectId(recipe_id), \n    }, {\n        '$set': {\n    'recipe_name':request.form.get('recipe_name'),\n    'photo_url':request.form.get('photo_url'),\n    'preptime': request.form.get('preptime'),\n    'servings': request.form.get('servings'),\n    'calories':request.form.get('calories'),\n    'fat':request.form.get('fat'),\n    'satfat':request.form.get('satfat'),\n    'carbs':request.form.get('carbs'),\n    'fiber':request.form.get('fiber'),\n    'sugar':request.form.get('sugar'),\n    'protein':request.form.get('protein'),\n    'ingredients':request.form.getlist('ingredients'),\n    'instructions':request.form.get('instructions'),\n    'tags':request.form.getlist('tags')\n    }\n    })\n                   \n                                                        \n    # Returns back to the recipe after update.\n    flash('Recipe updated.')\n    return redirect(url_for('recipe_display', recipe_id=recipe_id))\n\n\n@app.route('/add_recipe')\ndef add_recipe():\n    \"\"\"\n    Path to add a new recipe. User is brought to an empty form page.\n    \"\"\"\n    \n    recipes=mongo.db.recipes.find()\n    \n    return render_template('addrecipe.html', recipes=recipes)\n    \n@app.route('/insert_recipe', methods=[\"POST\"])\ndef insert_recipe():  \n    \"\"\"\n    Inserts new recipe to the Recipes collection when user submits the form from the add_recipe page.\n    \"\"\"\n    \n    recipes = mongo.db.recipes\n    # Identifies the current user in order to capture the author of the new recipe.\n    user = users.find_one({\"username\": session['user']})\n    new_recipe = recipes.insert_one({\n        'recipe_name':request.form.get('recipe_name'),\n        'photo_url':request.form.get('photo_url'),\n        'preptime': request.form.get('preptime'),\n        'servings': request.form.get('servings'),\n        'calories':request.form.get('calories'),\n        'fat':request.form.get('fat'),\n        'satfat':request.form.get('satfat'),\n        'carbs':request.form.get('carbs'),\n        'fiber':request.form.get('fiber'),\n        'sugar':request.form.get('sugar'),\n        'protein':request.form.get('protein'),\n        'ingredients':request.form.getlist('ingredients'),\n        'instructions':request.form.get('instructions'),\n        'tags':request.form.getlist('tags'),\n        'added_on' : datetime.datetime.utcnow(), \n        'author' : {\n            '_id': user['_id'],\n            'username': user['username']},\n        'favourite_count': int(0)\n    })\n    \n    # Returns the new recipe after insertion.\n    flash('Recipe Added.')\n    return redirect(url_for('recipe_display', recipe_id = new_recipe.inserted_id))\n    \n    \n@app.route('/delete_recipe/<recipe_id>')\ndef delete_recipe(recipe_id):\n    \"\"\"\n    Deletes the recipe currently being viewed but first adds the recipe to a collection called Deleted. \n    This allows the site Admin to reinstate the recipe if they see fit. \n    \"\"\"\n    \n    # Checks if the user is in session\n    if 'user' in session:\n        # # Identifies the current user in order to identify who has deleted the recipe.\n        user = users.find_one({\"username\": session['user']})\n            \n        deleted_recipe = recipes.find_one({'_id': ObjectId(recipe_id)})\n        # # Inserts recipe to be deleted into Deleted collection\n        deleted.insert_one(deleted_recipe)\n        # # Updates the deleted recipe by identifying who has deleted it and when\n        deleted.update_one({'_id': ObjectId(recipe_id)}, \n                                                {\"$set\" :\n                                                    {\"deleted_on\" : datetime.datetime.utcnow(), \n                                                    \"favourite_count\": int(0),\n                                                    \"deleted_by\" : {\n                                                                '_id': user['_id'],\n                                                                'username': user['username']}}\n                                                })\n        # Removes the recipe from the Recipes collection\n        recipes.remove({'_id': ObjectId(recipe_id)})\n        \n        \n        # Removes the deleted recipe from Users Favourites.\n        users.update({}, \n                    {\"$pull\": {\"favourite_recipes\": ObjectId(recipe_id)}},\n                    multi=True)\n        \n    else:\n        flash(\"You must be logged in to Edit, Save or Delete a recipe!\")\n        return redirect(url_for('get_recipes'))\n    \n    \n    flash('Recipe Deleted.')\n    return redirect(url_for('get_recipes')) \n    \n@app.route('/deleted_recipe_display/<recipe_id>')\ndef deleted_recipe_display(recipe_id):\n    \n    \"\"\"\n    Displays the recipe on a page of its own.\n    \"\"\"\n    \n    deleted_recipe = mongo.db.deleted.find_one({'_id':ObjectId(recipe_id)})\n    return render_template('deleted_recipe_display.html', deleted_recipe=deleted_recipe)    \n    \n    \n@app.route('/restore_recipe/<recipe_id>')\ndef restore_recipe(recipe_id):\n    \"\"\"\n    Restores the deleted recipe to the Recipe database and removes it from deleted. \n    Sets new fields in the recipe document stating who restored the recipe and when. \n    \"\"\"\n    \n    # Checks if the user is in session\n    if 'user' in session:\n        \n        # Checks if user is the Admin\n        if session['user'] == \"admin\":\n            # # Identifies the current user in order to identify who has deleted the recipe.\n            user = users.find_one({\"username\": session['user']})\n                \n            restored_recipe = deleted.find_one({'_id': ObjectId(recipe_id)})\n            # # Inserts recipe to be deleted into Deleted collection\n            recipes.insert_one(restored_recipe)\n            # # Updates the deleted recipe by identifying who has deleted it and when\n            recipes.update_one({'_id': ObjectId(recipe_id)}, \n                                                    {\"$set\" :\n                                                        {\"restored_on\" : datetime.datetime.utcnow(), \n                                                        \"restored_by\" : {\n                                                                    '_id': user['_id'],\n                                                                    'username': user['username']}}\n                                                    })\n            # Removes the recipe from the Deleted collection after restoration into Recipe collection\n            deleted.remove({'_id': ObjectId(recipe_id)})\n                        \n        \n        else:\n            flash(\"Only the Admin can restore recipes!\")\n            return redirect(url_for('get_recipes'))                \n        \n    else:\n        flash(\"You must be logged in to Edit, Save or Delete a recipe!\")\n        return redirect(url_for('get_recipes'))\n    \n    \n    flash('Recipe Restored.')\n    return redirect(url_for('recipe_display', recipe_id=recipe_id))     \n    \n    \n@app.route('/add_to_favourites/<recipe_id>', methods=[\"GET\", \"POST\"])\ndef add_to_favourites(recipe_id):\n    \"\"\"\n    Adds the current recipe to the current users \"Favourites\" array in the Users collection. \n    \"\"\"\n    # Checks if user is in session\n    if 'user' in session:\n        # Identifies the current user \n        user = users.find_one({\"username\": session['user']})\n        \n        favourites = user['favourite_recipes']\n        \n        # Makes sure the recipe is not already in the user's favourites and then adds to favourites\n        if ObjectId(recipe_id) not in favourites:\n            users.update_one({\"username\": session['user']}, \n                                                    {\"$push\" :\n                                                        {\"favourite_recipes\" : ObjectId(recipe_id)}})\n            \n            recipes.update({'_id':ObjectId(recipe_id)},\n                                                {'$inc': {'favourite_count': 1}})\n            \n        else:\n            # If the recipe is already in the User's favourites, the below message is displayed\n            flash(\"You have already added this recipe to your Favourites\")\n            return redirect(url_for('recipe_display', user=user['username'], recipe_id=recipe_id))\n    else:\n        flash(\"You must be logged in to Edit, Save or Delete a recipe!\")\n        return redirect(url_for('get_recipes'))\n    \n    \n    flash('Added to My Favourites.')\n    return redirect(url_for('recipe_display', user=user['username'], recipe_id=recipe_id))\n\n@app.route('/remove_from_favourites/<recipe_id>', methods=[\"GET\", \"POST\"])\ndef remove_from_favourites(recipe_id):\n    \"\"\"\n    Removes the current recipe from the current users \"Favourites\" array in the Users collection. \n    \"\"\"\n    # Identifies the current user \n    user = users.find_one({\"username\": session['user']})\n    \n    favourites = user['favourite_recipes']\n        \n            \n    # Identifies the recipe to be removed from the user's favourite\n    # remove_recipe = recipes.find_one({'_id': ObjectId(recipe_id)})\n        \n    # Removes recipe from user's favourites\n    if ObjectId(recipe_id) in favourites:\n        users.update({\"username\": session['user']}, \n                                                {\"$pull\" :\n                                                    {\"favourite_recipes\" : ObjectId(recipe_id)}})\n                                                    \n        recipes.update({'_id':ObjectId(recipe_id)},\n                                                {'$inc': {'favourite_count': -1}})                                            \n        flash('Removed from My Favourites.')\n        return redirect(url_for('my_favourites', user=user['username'], recipe_id=recipe_id))\n            \n                                                        \n    else:\n        flash(\"You must be logged in to Edit, Save or Delete a recipe!\")\n        return redirect(url_for('get_recipes'))\n        \n    \n    \n# Login - taken and modified from Miroslav Svec's (username Miro) sessions from Slack DCD channel\n@app.route('/login', methods=['GET'])\ndef login():\n    \"\"\"\n    Logs the user into the website. \n    \"\"\"\n    \n    # Check if user is not logged in already\n    if 'user' in session:\n        user_in_db = users.find_one({\"username\": session['user']})\n        if user_in_db:\n            # If so redirect user to their \"My Favourites\" page\n            flash(\"You are logged in already!\")\n            return redirect(url_for('my_favourites', user=user_in_db['username']))\n    else:\n        # Render the page for user to be able to log in\n        return render_template(\"login.html\")\n\n\n# # Taken and modified from Miroslav Svec's (username Miro) sessions from Slack DCD channel\n@app.route('/user_auth', methods=['POST'])\ndef user_auth():\n    \"\"\"\n    Checks user login details from login form\n    \"\"\"\n    \n    form = request.form.to_dict()\n    user_in_db = users.find_one({\"username\": form['username']})\n    # Check for user in database\n    if user_in_db:\n        # If passwords match (hashed / real password)\n        if check_password_hash(user_in_db['password'], form['user_password']):\n            # Log user in (add to session)\n            session['user'] = form['username']\n            # If the user is admin redirect him to admin area\n            if session['user'] == \"admin\":\n                return redirect(url_for('admin'))\n            else:\n                flash(\"You were logged in!\")\n                return redirect(url_for('my_favourites', user=user_in_db['username']))\n\n        else:\n            flash(\"Wrong password or user name!\")\n            return redirect(url_for('login'))\n    else:\n        flash(\"You must be registered!\")\n        return redirect(url_for('register'))\n\n# Sign up - taken and modified from Miroslav Svec's (username Miro) sessions from Slack DCD channel\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    \"\"\"\n    Registers new users to the website.\n    \"\"\"\n    \n    # Check if user is not logged in already\n    if 'user' in session:\n        flash('You are already signed in!')\n        return redirect(url_for('get_recipes'))\n    if request.method == 'POST':\n        form = request.form.to_dict()\n        # Check if the password and password1 actually match\n        if form['user_password'] == form['user_password1']:\n            # If so try to find the user in db\n            user = users.find_one({\"username\": form['username']})\n            if user:\n                flash(\"That username already exists!\")\n                return redirect(url_for('register'))\n            # If user does not exist register new user\n            else:\n                # Hash password\n                hash_pass = generate_password_hash(form['user_password'])\n                # Create new user with hashed password\n                users.insert_one(\n                    {\n                        'username': form['username'],\n                        'email': form['email'],\n                        'password': hash_pass,\n                        'favourite_recipes': []\n                    }\n                )\n                # Check if user is actually saved\n                user_in_db = users.find_one(\n                    {\"username\": form['username']})\n                if user_in_db:\n                    # Log user in (add to session)\n                    session['user'] = user_in_db['username']\n                    return redirect(url_for('my_favourites', user=user_in_db['username']))\n                else:\n                    flash(\"There was a problem saving your profile\")\n                    return redirect(url_for('register'))\n\n        else:\n            flash(\"Passwords dont match!\")\n            return redirect(url_for('register'))\n\n    return render_template(\"register.html\")\n\n# Log out- taken and modified from Miroslav Svec's (username Miro) sessions from Slack DCD channel\n@app.route('/logout')\ndef logout():\n    \"\"\"\n    Logs the users out of the session\n    \"\"\"\n    \n    \n    # Clear the session\n    session.clear()\n    flash('You have been logged out!')\n    return redirect(url_for('get_recipes'))\n    \n    \n@app.route('/profile/<user>')\ndef profile(user):\n    \"\"\"\n    Users Profile page displays the recipes the user has created.\n    \"\"\"\n    \n    users_profile = users.find({'username': user})\n    \n    # Pagination if Users recipes exceed 9 recipes per page\n    \n    # Results per page\n    p_limit = 9\n    current_page = int(request.args.get('current_page', 1))\n    users_recipes_count = recipes.find({'author.username': user}).count()\n    pages = range(1, int(math.ceil(users_recipes_count / p_limit)) + 1)\n    total_page_no = int(math.ceil(users_recipes_count/p_limit))\n    users_recipes = recipes.find({'author.username': user}).skip((current_page -1)*p_limit).limit(p_limit)\n\n    \n    return render_template('profile.html', user=user, \n                                           users_profile=users_profile, \n                                           users_recipes=users_recipes,\n                                           users_recipes_count=users_recipes_count,\n                                           current_page=current_page, pages=pages, total_page_no=total_page_no)\n\n@app.route('/my_favourites/<user>')\ndef my_favourites(user):\n    \"\"\"\n    My Favourites Page displays all the recipes the user has added as their favourites. \n    \"\"\"\n    # Check if user is logged in\n    if 'user' in session:\n        user_in_db = users.find_one({\"username\": user})\n        favourites = mongo.db.users.find(user_in_db)\n        \n        # Defines favourite_recipes array from current User document\n        favourites_recipes = user_in_db[\"favourite_recipes\"]\n        \n        # Finds favourite recipes in Recipe collection in order to display full recipes\n        favs = recipes.find({\"_id\" : {\n                                    \"$in\" : favourites_recipes }\n                            });\n        \n        # Most Popular recipes - appear when there are no results to the user's query\n        recommended = mongo.db.recipes.find().sort(\"favourite_count\", pymongo.DESCENDING).limit(3)\n        \n    else:\n        flash(\"You must be logged in!\")\n        return redirect(url_for('get_recipes'))\n        \n    return render_template('my_favourites.html', user=user_in_db, favourites=favourites, favourites_recipes=favourites_recipes, favs=favs, recommended=recommended)\n    \n    \n        \n        \n\n@app.route('/admin')\ndef admin():\n    \"\"\"\n    Admin area. Allows the Admin to check on statistics about the Users, Recipes and Deleted recipes collections.\n    \"\"\"\n    # Check if user is logged in\n    if 'user' in session:\n        \n        \n        # Checks if user is the Admin\n        if session['user'] == \"admin\":\n            # Queries for Admin reports\n            users = mongo.db.users.find()\n            recipes = mongo.db.recipes.find()\n            deleted = mongo.db.deleted.find()\n            \n            \n            \n            return render_template('admin.html', users=users, recipes=recipes, deleted=deleted)\n        else:\n            flash('Only Admins can access this page!')\n            return redirect(url_for('get_recipes'))\n    else:\n        flash('You must be logged')\n        return redirect(url_for('get_recipes'))\n    \nif __name__ == '__main__':\n    app.run(host=os.environ.get('IP'),\n            port=int(os.environ.get('PORT')),\n            debug=True),","undoManager":{"mark":-2,"position":100,"stack":[[{"start":{"row":274,"column":16},"end":{"row":274,"column":17},"action":"remove","lines":["y"],"id":3583}],[{"start":{"row":274,"column":16},"end":{"row":274,"column":17},"action":"insert","lines":["t"],"id":3584}],[{"start":{"row":273,"column":42},"end":{"row":273,"column":49},"action":"remove","lines":["Recipes"],"id":3585},{"start":{"row":273,"column":42},"end":{"row":273,"column":43},"action":"insert","lines":["D"]},{"start":{"row":273,"column":43},"end":{"row":273,"column":44},"action":"insert","lines":["e"]},{"start":{"row":273,"column":44},"end":{"row":273,"column":45},"action":"insert","lines":["l"]},{"start":{"row":273,"column":45},"end":{"row":273,"column":46},"action":"insert","lines":["e"]},{"start":{"row":273,"column":46},"end":{"row":273,"column":47},"action":"insert","lines":["t"]},{"start":{"row":273,"column":47},"end":{"row":273,"column":48},"action":"insert","lines":["e"]},{"start":{"row":273,"column":48},"end":{"row":273,"column":49},"action":"insert","lines":["d"]}],[{"start":{"row":277,"column":12},"end":{"row":280,"column":35},"action":"remove","lines":["# Removes the deleted recipe from Users Favourites.","            users.update({}, ","                        {\"$pull\": {\"favourite_recipes\": ObjectId(recipe_id)}},","                        multi=True)"],"id":3586},{"start":{"row":277,"column":8},"end":{"row":277,"column":12},"action":"remove","lines":["    "]},{"start":{"row":277,"column":4},"end":{"row":277,"column":8},"action":"remove","lines":["    "]},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"remove","lines":["    "]},{"start":{"row":276,"column":12},"end":{"row":277,"column":0},"action":"remove","lines":["",""]},{"start":{"row":276,"column":8},"end":{"row":276,"column":12},"action":"remove","lines":["    "]},{"start":{"row":276,"column":4},"end":{"row":276,"column":8},"action":"remove","lines":["    "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"remove","lines":["    "]},{"start":{"row":275,"column":12},"end":{"row":276,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":275,"column":8},"end":{"row":275,"column":12},"action":"remove","lines":["    "],"id":3587},{"start":{"row":275,"column":4},"end":{"row":275,"column":8},"action":"remove","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"remove","lines":["    "]},{"start":{"row":274,"column":56},"end":{"row":275,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":273,"column":60},"end":{"row":273,"column":61},"action":"insert","lines":[" "],"id":3588},{"start":{"row":273,"column":61},"end":{"row":273,"column":62},"action":"insert","lines":["a"]},{"start":{"row":273,"column":62},"end":{"row":273,"column":63},"action":"insert","lines":["f"]},{"start":{"row":273,"column":63},"end":{"row":273,"column":64},"action":"insert","lines":["t"]},{"start":{"row":273,"column":64},"end":{"row":273,"column":65},"action":"insert","lines":["e"]},{"start":{"row":273,"column":65},"end":{"row":273,"column":66},"action":"insert","lines":["r"]}],[{"start":{"row":273,"column":66},"end":{"row":273,"column":67},"action":"insert","lines":[" "],"id":3589},{"start":{"row":273,"column":67},"end":{"row":273,"column":68},"action":"insert","lines":["r"]},{"start":{"row":273,"column":68},"end":{"row":273,"column":69},"action":"insert","lines":["e"]},{"start":{"row":273,"column":69},"end":{"row":273,"column":70},"action":"insert","lines":["s"]},{"start":{"row":273,"column":70},"end":{"row":273,"column":71},"action":"insert","lines":["t"]}],[{"start":{"row":273,"column":71},"end":{"row":273,"column":72},"action":"insert","lines":["o"],"id":3590},{"start":{"row":273,"column":72},"end":{"row":273,"column":73},"action":"insert","lines":["r"]},{"start":{"row":273,"column":73},"end":{"row":273,"column":74},"action":"insert","lines":["a"]},{"start":{"row":273,"column":74},"end":{"row":273,"column":75},"action":"insert","lines":["t"]},{"start":{"row":273,"column":75},"end":{"row":273,"column":76},"action":"insert","lines":["i"]},{"start":{"row":273,"column":76},"end":{"row":273,"column":77},"action":"insert","lines":["o"]},{"start":{"row":273,"column":77},"end":{"row":273,"column":78},"action":"insert","lines":["n"]}],[{"start":{"row":273,"column":78},"end":{"row":273,"column":79},"action":"insert","lines":[" "],"id":3591},{"start":{"row":273,"column":79},"end":{"row":273,"column":80},"action":"insert","lines":["i"]},{"start":{"row":273,"column":80},"end":{"row":273,"column":81},"action":"insert","lines":["n"]},{"start":{"row":273,"column":81},"end":{"row":273,"column":82},"action":"insert","lines":["t"]},{"start":{"row":273,"column":82},"end":{"row":273,"column":83},"action":"insert","lines":["o"]},{"start":{"row":273,"column":83},"end":{"row":273,"column":84},"action":"insert","lines":["p"]}],[{"start":{"row":273,"column":84},"end":{"row":273,"column":85},"action":"insert","lines":[" "],"id":3592}],[{"start":{"row":273,"column":84},"end":{"row":273,"column":85},"action":"remove","lines":[" "],"id":3593}],[{"start":{"row":273,"column":84},"end":{"row":273,"column":85},"action":"insert","lines":["="],"id":3594}],[{"start":{"row":273,"column":84},"end":{"row":273,"column":85},"action":"remove","lines":["="],"id":3595},{"start":{"row":273,"column":83},"end":{"row":273,"column":84},"action":"remove","lines":["p"]}],[{"start":{"row":273,"column":83},"end":{"row":273,"column":84},"action":"insert","lines":[" "],"id":3596},{"start":{"row":273,"column":84},"end":{"row":273,"column":85},"action":"insert","lines":["R"]},{"start":{"row":273,"column":85},"end":{"row":273,"column":86},"action":"insert","lines":["e"]},{"start":{"row":273,"column":86},"end":{"row":273,"column":87},"action":"insert","lines":["c"]},{"start":{"row":273,"column":87},"end":{"row":273,"column":88},"action":"insert","lines":["i"]},{"start":{"row":273,"column":88},"end":{"row":273,"column":89},"action":"insert","lines":["p"]},{"start":{"row":273,"column":89},"end":{"row":273,"column":90},"action":"insert","lines":["e"]}],[{"start":{"row":273,"column":90},"end":{"row":273,"column":91},"action":"insert","lines":[" "],"id":3597},{"start":{"row":273,"column":91},"end":{"row":273,"column":92},"action":"insert","lines":["c"]},{"start":{"row":273,"column":92},"end":{"row":273,"column":93},"action":"insert","lines":["o"]},{"start":{"row":273,"column":93},"end":{"row":273,"column":94},"action":"insert","lines":["l"]},{"start":{"row":273,"column":94},"end":{"row":273,"column":95},"action":"insert","lines":["l"]},{"start":{"row":273,"column":95},"end":{"row":273,"column":96},"action":"insert","lines":["e"]},{"start":{"row":273,"column":96},"end":{"row":273,"column":97},"action":"insert","lines":["c"]},{"start":{"row":273,"column":97},"end":{"row":273,"column":98},"action":"insert","lines":["t"]},{"start":{"row":273,"column":98},"end":{"row":273,"column":99},"action":"insert","lines":["i"]},{"start":{"row":273,"column":99},"end":{"row":273,"column":100},"action":"insert","lines":["o"]},{"start":{"row":273,"column":100},"end":{"row":273,"column":101},"action":"insert","lines":["n"]}],[{"start":{"row":268,"column":56},"end":{"row":268,"column":82},"action":"remove","lines":["\"favourite_count\": int(0),"],"id":3598},{"start":{"row":268,"column":52},"end":{"row":268,"column":56},"action":"remove","lines":["    "]},{"start":{"row":268,"column":48},"end":{"row":268,"column":52},"action":"remove","lines":["    "]},{"start":{"row":268,"column":44},"end":{"row":268,"column":48},"action":"remove","lines":["    "]},{"start":{"row":268,"column":40},"end":{"row":268,"column":44},"action":"remove","lines":["    "]},{"start":{"row":268,"column":36},"end":{"row":268,"column":40},"action":"remove","lines":["    "]},{"start":{"row":268,"column":32},"end":{"row":268,"column":36},"action":"remove","lines":["    "]},{"start":{"row":268,"column":28},"end":{"row":268,"column":32},"action":"remove","lines":["    "]},{"start":{"row":268,"column":24},"end":{"row":268,"column":28},"action":"remove","lines":["    "]},{"start":{"row":268,"column":20},"end":{"row":268,"column":24},"action":"remove","lines":["    "]},{"start":{"row":268,"column":16},"end":{"row":268,"column":20},"action":"remove","lines":["    "]},{"start":{"row":268,"column":12},"end":{"row":268,"column":16},"action":"remove","lines":["    "]}],[{"start":{"row":268,"column":8},"end":{"row":268,"column":12},"action":"remove","lines":["    "],"id":3599},{"start":{"row":268,"column":4},"end":{"row":268,"column":8},"action":"remove","lines":["    "]},{"start":{"row":268,"column":0},"end":{"row":268,"column":4},"action":"remove","lines":["    "]},{"start":{"row":267,"column":101},"end":{"row":268,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":250,"column":11},"end":{"row":250,"column":20},"action":"remove","lines":["new array"],"id":3600},{"start":{"row":250,"column":10},"end":{"row":250,"column":11},"action":"remove","lines":[" "]},{"start":{"row":250,"column":9},"end":{"row":250,"column":10},"action":"remove","lines":["a"]}],[{"start":{"row":250,"column":9},"end":{"row":250,"column":10},"action":"insert","lines":["n"],"id":3601},{"start":{"row":250,"column":10},"end":{"row":250,"column":11},"action":"insert","lines":["e"]},{"start":{"row":250,"column":11},"end":{"row":250,"column":12},"action":"insert","lines":["w"]}],[{"start":{"row":250,"column":12},"end":{"row":250,"column":13},"action":"insert","lines":[" "],"id":3602},{"start":{"row":250,"column":13},"end":{"row":250,"column":14},"action":"insert","lines":["f"]},{"start":{"row":250,"column":14},"end":{"row":250,"column":15},"action":"insert","lines":["i"]},{"start":{"row":250,"column":15},"end":{"row":250,"column":16},"action":"insert","lines":["e"]},{"start":{"row":250,"column":16},"end":{"row":250,"column":17},"action":"insert","lines":["l"]},{"start":{"row":250,"column":17},"end":{"row":250,"column":18},"action":"insert","lines":["d"]},{"start":{"row":250,"column":18},"end":{"row":250,"column":19},"action":"insert","lines":["s"]}],[{"start":{"row":250,"column":33},"end":{"row":250,"column":34},"action":"insert","lines":[" "],"id":3603},{"start":{"row":250,"column":34},"end":{"row":250,"column":35},"action":"insert","lines":["d"]},{"start":{"row":250,"column":35},"end":{"row":250,"column":36},"action":"insert","lines":["o"]},{"start":{"row":250,"column":36},"end":{"row":250,"column":37},"action":"insert","lines":["c"]},{"start":{"row":250,"column":37},"end":{"row":250,"column":38},"action":"insert","lines":["u"]},{"start":{"row":250,"column":38},"end":{"row":250,"column":39},"action":"insert","lines":["m"]},{"start":{"row":250,"column":39},"end":{"row":250,"column":40},"action":"insert","lines":["e"]},{"start":{"row":250,"column":40},"end":{"row":250,"column":41},"action":"insert","lines":["n"]},{"start":{"row":250,"column":41},"end":{"row":250,"column":42},"action":"insert","lines":["t"]}],[{"start":{"row":284,"column":18},"end":{"row":284,"column":25},"action":"remove","lines":["Deleted"],"id":3604},{"start":{"row":284,"column":18},"end":{"row":284,"column":19},"action":"insert","lines":["R"]},{"start":{"row":284,"column":19},"end":{"row":284,"column":20},"action":"insert","lines":["e"]},{"start":{"row":284,"column":20},"end":{"row":284,"column":21},"action":"insert","lines":["s"]},{"start":{"row":284,"column":21},"end":{"row":284,"column":22},"action":"insert","lines":["t"]},{"start":{"row":284,"column":22},"end":{"row":284,"column":23},"action":"insert","lines":["o"]},{"start":{"row":284,"column":23},"end":{"row":284,"column":24},"action":"insert","lines":["r"]},{"start":{"row":284,"column":24},"end":{"row":284,"column":25},"action":"insert","lines":["e"]},{"start":{"row":284,"column":25},"end":{"row":284,"column":26},"action":"insert","lines":["d"]}],[{"start":{"row":261,"column":30},"end":{"row":261,"column":37},"action":"remove","lines":["recipes"],"id":3605},{"start":{"row":261,"column":30},"end":{"row":261,"column":31},"action":"insert","lines":["d"]},{"start":{"row":261,"column":31},"end":{"row":261,"column":32},"action":"insert","lines":["e"]},{"start":{"row":261,"column":32},"end":{"row":261,"column":33},"action":"insert","lines":["l"]},{"start":{"row":261,"column":33},"end":{"row":261,"column":34},"action":"insert","lines":["e"]},{"start":{"row":261,"column":34},"end":{"row":261,"column":35},"action":"insert","lines":["t"]},{"start":{"row":261,"column":35},"end":{"row":261,"column":36},"action":"insert","lines":["e"]},{"start":{"row":261,"column":36},"end":{"row":261,"column":37},"action":"insert","lines":["d"]}],[{"start":{"row":285,"column":27},"end":{"row":285,"column":42},"action":"remove","lines":["('get_recipes')"],"id":3607},{"start":{"row":285,"column":27},"end":{"row":285,"column":66},"action":"insert","lines":["('recipe_display', recipe_id=recipe_id)"]}],[{"start":{"row":249,"column":68},"end":{"row":249,"column":69},"action":"remove","lines":["f"],"id":3608}],[{"start":{"row":249,"column":68},"end":{"row":249,"column":69},"action":"insert","lines":["y"],"id":3609}],[{"start":{"row":249,"column":68},"end":{"row":249,"column":69},"action":"remove","lines":["y"],"id":3610}],[{"start":{"row":249,"column":68},"end":{"row":249,"column":69},"action":"insert","lines":["t"],"id":3611}],[{"start":{"row":273,"column":56},"end":{"row":274,"column":0},"action":"insert","lines":["",""],"id":3612},{"start":{"row":274,"column":0},"end":{"row":274,"column":12},"action":"insert","lines":["            "]},{"start":{"row":274,"column":12},"end":{"row":275,"column":0},"action":"insert","lines":["",""]},{"start":{"row":275,"column":0},"end":{"row":275,"column":12},"action":"insert","lines":["            "]},{"start":{"row":275,"column":12},"end":{"row":275,"column":13},"action":"insert","lines":["d"]},{"start":{"row":275,"column":13},"end":{"row":275,"column":14},"action":"insert","lines":["e"]},{"start":{"row":275,"column":14},"end":{"row":275,"column":15},"action":"insert","lines":["l"]},{"start":{"row":275,"column":15},"end":{"row":275,"column":16},"action":"insert","lines":["e"]},{"start":{"row":275,"column":16},"end":{"row":275,"column":17},"action":"insert","lines":["t"]},{"start":{"row":275,"column":17},"end":{"row":275,"column":18},"action":"insert","lines":["e"]}],[{"start":{"row":275,"column":18},"end":{"row":275,"column":19},"action":"insert","lines":["d"],"id":3613},{"start":{"row":275,"column":19},"end":{"row":275,"column":20},"action":"insert","lines":["."]},{"start":{"row":275,"column":20},"end":{"row":275,"column":21},"action":"insert","lines":["u"]},{"start":{"row":275,"column":21},"end":{"row":275,"column":22},"action":"insert","lines":["p"]}],[{"start":{"row":275,"column":22},"end":{"row":275,"column":23},"action":"insert","lines":["d"],"id":3614},{"start":{"row":275,"column":23},"end":{"row":275,"column":24},"action":"insert","lines":["a"]},{"start":{"row":275,"column":24},"end":{"row":275,"column":25},"action":"insert","lines":["t"]},{"start":{"row":275,"column":25},"end":{"row":275,"column":26},"action":"insert","lines":["e"]}],[{"start":{"row":275,"column":26},"end":{"row":275,"column":28},"action":"insert","lines":["()"],"id":3615}],[{"start":{"row":275,"column":27},"end":{"row":275,"column":29},"action":"insert","lines":["{}"],"id":3616}],[{"start":{"row":275,"column":30},"end":{"row":276,"column":0},"action":"insert","lines":["",""],"id":3617},{"start":{"row":276,"column":0},"end":{"row":276,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":276,"column":12},"end":{"row":276,"column":16},"action":"insert","lines":["    "],"id":3618}],[{"start":{"row":276,"column":16},"end":{"row":276,"column":20},"action":"insert","lines":["    "],"id":3619}],[{"start":{"row":276,"column":20},"end":{"row":276,"column":24},"action":"insert","lines":["    "],"id":3620}],[{"start":{"row":276,"column":24},"end":{"row":276,"column":25},"action":"insert","lines":["{"],"id":3621}],[{"start":{"row":276,"column":24},"end":{"row":276,"column":25},"action":"remove","lines":["{"],"id":3622}],[{"start":{"row":275,"column":30},"end":{"row":275,"column":31},"action":"insert","lines":[","],"id":3623}],[{"start":{"row":275,"column":26},"end":{"row":275,"column":30},"action":"remove","lines":["({})"],"id":3624},{"start":{"row":275,"column":26},"end":{"row":280,"column":1},"action":"insert","lines":["(","  {},","  { $set: {\"new_field\": 1} },","  false,","  true",")"]}],[{"start":{"row":276,"column":2},"end":{"row":276,"column":4},"action":"insert","lines":["  "],"id":3625}],[{"start":{"row":276,"column":4},"end":{"row":276,"column":8},"action":"insert","lines":["    "],"id":3626}],[{"start":{"row":276,"column":8},"end":{"row":276,"column":12},"action":"insert","lines":["    "],"id":3627}],[{"start":{"row":276,"column":12},"end":{"row":276,"column":16},"action":"insert","lines":["    "],"id":3628}],[{"start":{"row":276,"column":16},"end":{"row":276,"column":20},"action":"insert","lines":["    "],"id":3629}],[{"start":{"row":276,"column":20},"end":{"row":276,"column":24},"action":"insert","lines":["    "],"id":3630}],[{"start":{"row":276,"column":2},"end":{"row":276,"column":4},"action":"insert","lines":["  "],"id":3631}],[{"start":{"row":277,"column":2},"end":{"row":277,"column":4},"action":"insert","lines":["  "],"id":3632}],[{"start":{"row":277,"column":4},"end":{"row":277,"column":8},"action":"insert","lines":["    "],"id":3633}],[{"start":{"row":277,"column":0},"end":{"row":277,"column":8},"action":"remove","lines":["        "],"id":3634},{"start":{"row":277,"column":0},"end":{"row":277,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":277,"column":4},"end":{"row":277,"column":8},"action":"insert","lines":["    "],"id":3635}],[{"start":{"row":277,"column":8},"end":{"row":277,"column":12},"action":"insert","lines":["    "],"id":3636}],[{"start":{"row":277,"column":12},"end":{"row":277,"column":16},"action":"insert","lines":["    "],"id":3637}],[{"start":{"row":277,"column":16},"end":{"row":277,"column":20},"action":"insert","lines":["    "],"id":3638}],[{"start":{"row":277,"column":20},"end":{"row":277,"column":24},"action":"insert","lines":["    "],"id":3639}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":28},"action":"insert","lines":["    "],"id":3640}],[{"start":{"row":278,"column":2},"end":{"row":278,"column":4},"action":"insert","lines":["  "],"id":3641}],[{"start":{"row":278,"column":4},"end":{"row":278,"column":8},"action":"insert","lines":["    "],"id":3642}],[{"start":{"row":278,"column":8},"end":{"row":278,"column":12},"action":"insert","lines":["    "],"id":3643}],[{"start":{"row":278,"column":12},"end":{"row":278,"column":16},"action":"insert","lines":["    "],"id":3644}],[{"start":{"row":278,"column":16},"end":{"row":278,"column":20},"action":"insert","lines":["    "],"id":3645}],[{"start":{"row":278,"column":20},"end":{"row":278,"column":24},"action":"insert","lines":["    "],"id":3646}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":28},"action":"insert","lines":["    "],"id":3647}],[{"start":{"row":279,"column":2},"end":{"row":279,"column":4},"action":"insert","lines":["  "],"id":3648}],[{"start":{"row":279,"column":4},"end":{"row":279,"column":8},"action":"insert","lines":["    "],"id":3649}],[{"start":{"row":279,"column":8},"end":{"row":279,"column":12},"action":"insert","lines":["    "],"id":3650}],[{"start":{"row":279,"column":12},"end":{"row":279,"column":16},"action":"insert","lines":["    "],"id":3651}],[{"start":{"row":279,"column":16},"end":{"row":279,"column":20},"action":"insert","lines":["    "],"id":3652}],[{"start":{"row":279,"column":20},"end":{"row":279,"column":24},"action":"insert","lines":["    "],"id":3653}],[{"start":{"row":279,"column":24},"end":{"row":279,"column":28},"action":"insert","lines":["    "],"id":3654}],[{"start":{"row":280,"column":0},"end":{"row":280,"column":4},"action":"insert","lines":["    "],"id":3655}],[{"start":{"row":280,"column":4},"end":{"row":280,"column":8},"action":"insert","lines":["    "],"id":3656}],[{"start":{"row":280,"column":8},"end":{"row":280,"column":12},"action":"insert","lines":["    "],"id":3657}],[{"start":{"row":280,"column":12},"end":{"row":280,"column":16},"action":"insert","lines":["    "],"id":3658}],[{"start":{"row":280,"column":16},"end":{"row":280,"column":20},"action":"insert","lines":["    "],"id":3659}],[{"start":{"row":280,"column":20},"end":{"row":280,"column":24},"action":"insert","lines":["    "],"id":3660}],[{"start":{"row":280,"column":24},"end":{"row":280,"column":28},"action":"insert","lines":["    "],"id":3661}],[{"start":{"row":276,"column":25},"end":{"row":276,"column":26},"action":"remove","lines":[" "],"id":3662},{"start":{"row":276,"column":24},"end":{"row":276,"column":25},"action":"remove","lines":[" "]},{"start":{"row":276,"column":20},"end":{"row":276,"column":24},"action":"remove","lines":["    "]},{"start":{"row":276,"column":16},"end":{"row":276,"column":20},"action":"remove","lines":["    "]},{"start":{"row":276,"column":12},"end":{"row":276,"column":16},"action":"remove","lines":["    "]},{"start":{"row":276,"column":8},"end":{"row":276,"column":12},"action":"remove","lines":["    "]},{"start":{"row":276,"column":4},"end":{"row":276,"column":8},"action":"remove","lines":["    "]},{"start":{"row":276,"column":0},"end":{"row":276,"column":4},"action":"remove","lines":["    "]},{"start":{"row":275,"column":27},"end":{"row":276,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":276,"column":24},"end":{"row":276,"column":28},"action":"remove","lines":["    "],"id":3663}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":28},"action":"remove","lines":["    "],"id":3664}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":28},"action":"remove","lines":["    "],"id":3665}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":25},"action":"remove","lines":["f"],"id":3666}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":25},"action":"insert","lines":["F"],"id":3667}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":25},"action":"remove","lines":["t"],"id":3668}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":25},"action":"insert","lines":["T"],"id":3669}],[{"start":{"row":279,"column":24},"end":{"row":279,"column":28},"action":"remove","lines":["    "],"id":3670},{"start":{"row":279,"column":20},"end":{"row":279,"column":24},"action":"remove","lines":["    "]},{"start":{"row":279,"column":16},"end":{"row":279,"column":20},"action":"remove","lines":["    "]},{"start":{"row":279,"column":12},"end":{"row":279,"column":16},"action":"remove","lines":["    "]},{"start":{"row":279,"column":8},"end":{"row":279,"column":12},"action":"remove","lines":["    "]},{"start":{"row":279,"column":4},"end":{"row":279,"column":8},"action":"remove","lines":["    "]},{"start":{"row":279,"column":0},"end":{"row":279,"column":4},"action":"remove","lines":["    "]},{"start":{"row":278,"column":28},"end":{"row":279,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":278,"column":29},"end":{"row":278,"column":30},"action":"remove","lines":[","],"id":3671}],[{"start":{"row":276,"column":26},"end":{"row":276,"column":27},"action":"insert","lines":["\""],"id":3672}],[{"start":{"row":276,"column":31},"end":{"row":276,"column":32},"action":"insert","lines":["\""],"id":3673}],[{"start":{"row":277,"column":24},"end":{"row":277,"column":25},"action":"insert","lines":["u"],"id":3674},{"start":{"row":277,"column":25},"end":{"row":277,"column":26},"action":"insert","lines":["p"]},{"start":{"row":277,"column":26},"end":{"row":277,"column":27},"action":"insert","lines":["s"]},{"start":{"row":277,"column":27},"end":{"row":277,"column":28},"action":"insert","lines":["e"]},{"start":{"row":277,"column":28},"end":{"row":277,"column":29},"action":"insert","lines":["r"]},{"start":{"row":277,"column":29},"end":{"row":277,"column":30},"action":"insert","lines":["t"]}],[{"start":{"row":277,"column":30},"end":{"row":277,"column":31},"action":"insert","lines":["="],"id":3675}],[{"start":{"row":278,"column":24},"end":{"row":278,"column":25},"action":"insert","lines":["m"],"id":3676},{"start":{"row":278,"column":25},"end":{"row":278,"column":26},"action":"insert","lines":["u"]},{"start":{"row":278,"column":26},"end":{"row":278,"column":27},"action":"insert","lines":["l"]},{"start":{"row":278,"column":27},"end":{"row":278,"column":28},"action":"insert","lines":["t"]},{"start":{"row":278,"column":28},"end":{"row":278,"column":29},"action":"insert","lines":["i"]},{"start":{"row":278,"column":29},"end":{"row":278,"column":30},"action":"insert","lines":["="]}],[{"start":{"row":276,"column":36},"end":{"row":276,"column":45},"action":"remove","lines":["new_field"],"id":3677},{"start":{"row":276,"column":36},"end":{"row":276,"column":37},"action":"insert","lines":["f"]},{"start":{"row":276,"column":37},"end":{"row":276,"column":38},"action":"insert","lines":["s"]}],[{"start":{"row":276,"column":37},"end":{"row":276,"column":38},"action":"remove","lines":["s"],"id":3678}],[{"start":{"row":276,"column":37},"end":{"row":276,"column":38},"action":"insert","lines":["a"],"id":3679},{"start":{"row":276,"column":38},"end":{"row":276,"column":39},"action":"insert","lines":["v"]},{"start":{"row":276,"column":39},"end":{"row":276,"column":40},"action":"insert","lines":["o"]},{"start":{"row":276,"column":40},"end":{"row":276,"column":41},"action":"insert","lines":["u"]},{"start":{"row":276,"column":41},"end":{"row":276,"column":42},"action":"insert","lines":["r"]},{"start":{"row":276,"column":42},"end":{"row":276,"column":43},"action":"insert","lines":["i"]},{"start":{"row":276,"column":43},"end":{"row":276,"column":44},"action":"insert","lines":["t"]}],[{"start":{"row":276,"column":44},"end":{"row":276,"column":45},"action":"insert","lines":["e"],"id":3680}],[{"start":{"row":276,"column":36},"end":{"row":276,"column":45},"action":"remove","lines":["favourite"],"id":3681},{"start":{"row":276,"column":36},"end":{"row":276,"column":51},"action":"insert","lines":["favourite_count"]}],[{"start":{"row":276,"column":54},"end":{"row":276,"column":55},"action":"remove","lines":["1"],"id":3682}],[{"start":{"row":276,"column":54},"end":{"row":276,"column":55},"action":"insert","lines":["0"],"id":3683}],[{"start":{"row":275,"column":12},"end":{"row":278,"column":35},"action":"remove","lines":["deleted.update({},","                        { \"$set\": {\"favourite_count\": 0} },","                        upsert=False,","                        multi=True)"],"id":3684},{"start":{"row":275,"column":8},"end":{"row":275,"column":12},"action":"remove","lines":["    "]},{"start":{"row":275,"column":4},"end":{"row":275,"column":8},"action":"remove","lines":["    "]},{"start":{"row":275,"column":0},"end":{"row":275,"column":4},"action":"remove","lines":["    "]},{"start":{"row":274,"column":12},"end":{"row":275,"column":0},"action":"remove","lines":["",""]},{"start":{"row":274,"column":8},"end":{"row":274,"column":12},"action":"remove","lines":["    "]},{"start":{"row":274,"column":4},"end":{"row":274,"column":8},"action":"remove","lines":["    "]},{"start":{"row":274,"column":0},"end":{"row":274,"column":4},"action":"remove","lines":["    "]},{"start":{"row":273,"column":56},"end":{"row":274,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1563274483964}